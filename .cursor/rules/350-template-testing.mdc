---
description: Use visualization testing for HTML templates to simplify assertions and focus on template logic
globs: **/*_test.go
---

# HTML Template Visualization Testing

## Context
- HTML templates contain complex markup that's difficult to test directly
- Template logic (conditionals, loops) needs thorough testing
- Direct HTML assertions are brittle and hard to maintain

## Requirements
- Convert HTML output to simplified text representation for testing
- Add data-test-icon attributes to elements for easier identification
- Use a visualizeTemplate function to transform HTML into readable text
- Visualize element states (selected, disabled, etc.) with symbols (‚úì, ‚≠ê, etc.)
- Use <section> elements with data-section attributes to organize UI areas
- Render sections with clear visual separation and newlines
- Test all conditional logic paths in templates
- Use table-driven tests for multiple template states
- Assert against normalized text output instead of raw HTML
- Format expected output over multiple lines for readability
- Preserve newlines in normalized output for better test readability

## Examples
<example>
// Good: Testing template with visualization, sections, and state indicators
func TestCardSelection(t *testing.T) {
	// Arrange
	model := domain.NewUIModel()
	model.SelectedCard = Card{Suit: "Spade", Rank: 7}
	
	// Act
	doc := renderTemplate(t, model)
	
	// Assert - Using visualization with multi-line format and state indicators
	expected := `
--- Game Prompt ---
Your turn.

--- Table Cards ---
Table Cards (1)
[üëÜ Card-Name ‚≠ê]

--- Player Hand ---
Your Hand (1)
[üëÜ Selected-Card ‚úì]
	`
	actual := visualizeTemplate(doc)
	assert.Equal(t, normalizeWhitespace(expected), actual)
}

// HTML template with sections for better organization
<section data-section="Game Prompt">
    <div class="game-prompt">{{.GamePrompt}}</div>
</section>

<section data-section="Table Cards">
    <div class="card-area">
        <h2>Table Cards ({{len .TableCards}})</h2>
        <div>
            {{range .TableCards}}
            <div data-test-icon="{{.Name}}-di-{{.Suit}}" class="card {{.Suit | lower}}">
                {{.Name}} di {{.Suit}}
            </div>
            {{end}}
        </div>
    </div>
</section>

// Visualization helper that preserves newlines and handles sections
func normalizeWhitespace(s string) string {
	// First, replace all whitespace sequences within lines with a single space
	inlineNormalized := replaceAll(s, `[^\S\n]+`, " ")
	
	// Then, replace multiple newlines with a single newline
	multiNewlineNormalized := replaceAll(inlineNormalized, `\n+`, "\n")
	
	// Finally, trim leading/trailing whitespace from each line
	lines := strings.Split(multiNewlineNormalized, "\n")
	for i, line := range lines {
		lines[i] = strings.TrimSpace(line)
	}
	
	return strings.TrimSpace(strings.Join(lines, "\n"))
}
</example>

<example type="invalid">
// Bad: Testing template with direct HTML assertions
func TestCardSelection(t *testing.T) {
	// Arrange
	model := domain.NewUIModel()
	model.SelectedCard = Card{Suit: "Spade", Rank: 7}
	
	// Act
	doc := renderTemplate(t, model)
	
	// Assert - Brittle direct HTML assertions
	assert.Contains(t, doc, `<div class="card spade selected">`)
	assert.Contains(t, doc, `<div class="card-rank">7</div>`)
	assert.Contains(t, doc, `<div class="card-suit">Sette di Spade</div>`)
}
</example> 