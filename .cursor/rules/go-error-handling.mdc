---
description: Best practices for error handling in Go
globs: **/*.go
alwaysApply: false
---
# Go Error Handling Best Practices

When handling errors in Go, follow these guidelines:

- Always check error returns and handle them appropriately
- Use the `errors` package for simple error creation
- For custom errors, implement the `error` interface
- Wrap errors with context using `fmt.Errorf("context: %w", err)` or packages like `github.com/pkg/errors`
- Return errors rather than panicking in most situations
- Panic only for errors that can be detected at program startup time, eg: failure to compile a regexp
- Use sentinel errors (`var ErrNotFound = errors.New("not found")`) for expected error conditions
- Create custom error types for complex error scenarios
- Use error handling middleware in web applications

Example of proper error handling:

```go
func ProcessFile(path string) ([]byte, error) {
    file, err := os.Open(path)
    if err != nil {
        return nil, fmt.Errorf("opening file %s: %w", path, err)
    }
    defer file.Close()
    
    data, err := io.ReadAll(file)
    if err != nil {
        return nil, fmt.Errorf("reading file %s: %w", path, err)
    }
    
    return data, nil
}
```

Remember: Errors are values in Go, treat them as first-class citizens in your code. 