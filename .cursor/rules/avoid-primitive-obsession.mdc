---
description: When writing domain models
globs: *.go
alwaysApply: false
---
# When writing domain models

Avoid primitive obsession in domain models by following these guidelines:

- Do not use primitive types like `string` and `int` directly in domain objects
- Create small, specialized types that represent domain concepts
- Use these specialized types to enforce invariants and business rules
- Add validation at construction time for these types
- Include relevant domain methods on these types

Examples:

Instead of:
```go
type User struct {
    ID int
    Email string
    Age int
}
```

Prefer:
```go
type UserID int

func NewUserID(id int) (UserID, error) {
    if id <= 0 {
        return 0, errors.New("user ID must be positive")
    }
    return UserID(id), nil
}

type Email string

func NewEmail(email string) (Email, error) {
    if !isValidEmail(email) {
        return "", errors.New("invalid email format")
    }
    return Email(email), nil
}

type Age int

func NewAge(age int) (Age, error) {
    if age < 0 || age > 150 {
        return 0, errors.New("age must be between 0 and 150")
    }
    return Age(age), nil
}

type User struct {
    ID UserID
    Email Email
    Age Age
}
```

This approach provides type safety, encapsulates validation, and makes the code more expressive.
