---
description: Best practices for interfaces and composition in Go
globs: **/*.go
alwaysApply: false
---
# Go Interfaces and Composition Best Practices

When working with interfaces and composition in Go, follow these guidelines:

- Keep interfaces small and focused (interface segregation principle)
- Define interfaces where they are used, not where they are implemented
- Use embedding for composition rather than inheritance
- Use the empty interface (`interface{}` or `any`) sparingly
- Implement common interfaces like `fmt.Stringer`, `json.Marshaler`, etc. when appropriate
- Use interface satisfaction checks during compilation (`var _ MyInterface = (*MyImplementation)(nil)`)
- Prefer accepting interfaces and returning concrete types
- Use structural typing to your advantage
- Consider using generics for type-safe abstractions
- Use method sets to implement behavior without inheritance

Example of proper interface usage:

```go
// Define the interface where it's used
type DataStore interface {
    Get(id string) ([]byte, error)
    Set(id string, data []byte) error
    Delete(id string) error
}

// Implementation
type MemoryStore struct {
    data map[string][]byte
    mu   sync.RWMutex
}

// Verify interface compliance at compile time
var _ DataStore = (*MemoryStore)(nil)

func NewMemoryStore() *MemoryStore {
    return &MemoryStore{
        data: make(map[string][]byte),
    }
}

func (m *MemoryStore) Get(id string) ([]byte, error) {
    m.mu.RLock()
    defer m.mu.RUnlock()
    
    data, ok := m.data[id]
    if !ok {
        return nil, errors.New("not found")
    }
    return data, nil
}

func (m *MemoryStore) Set(id string, data []byte) error {
    m.mu.Lock()
    defer m.mu.Unlock()
    
    m.data[id] = data
    return nil
}

func (m *MemoryStore) Delete(id string) error {
    m.mu.Lock()
    defer m.mu.Unlock()
    
    delete(m.data, id)
    return nil
}

// Service using the interface
type Service struct {
    store DataStore
}

func NewService(store DataStore) *Service {
    return &Service{store: store}
}
```

Remember: Go's interfaces are satisfied implicitly, which enables powerful composition patterns. 