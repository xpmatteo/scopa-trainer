---
description: Guidelines for the "Refactor" phase of TDD
globs: **/*.go
alwaysApply: false
---
# The "Refactor" Phase of TDD

The "Refactor" phase is the third step in the TDD cycle where you improve the code while keeping the tests passing.

## When refactoring code:

- Focus on improving the design without changing behavior
- Run tests frequently to ensure you haven't broken anything
- Look for duplication and remove it
- Improve names of variables, methods, and classes
- Extract methods or classes to improve organization
- Apply design patterns where appropriate
- Simplify complex code
- Optimize only if necessary and with measurements
- Make small, incremental changes
- Consider both production code and test code for refactoring

## Common mistakes to avoid:

- Refactoring without running tests
- Making too many changes at once
- Abstracting too early - "duplication is a hint, not a command"
- Refactoring further than necessary for the current session
- Adding new functionality during refactoring
- Optimizing prematurely without evidence of performance issues
- Ignoring test code quality - tests need refactoring too
- Refactoring without a clear goal in mind

## Remember:

- The goal is to improve the design while maintaining behavior
- Tests give you confidence to refactor safely
- Refactoring is an ongoing process, not a one-time activity
- Good design emerges through continuous refactoring
- If tests start failing, undo your last change and try again
- Sometimes it's better to rewrite than to refactor
- "Clean code that works" is the ultimate goal 