---
description: Follow the canonical TDD workflow
globs: **/*_test.go
alwaysApply: false
---
# Canon TDD Workflow

Follow these steps when practicing Test-Driven Development:

## 1. Create a Test List
- Begin by listing all expected variants in the new behavior
- Focus on behavioral analysis, not implementation details
- Include both basic cases and edge cases
- Consider how the behavior should work in different scenarios
- Avoid mixing in implementation design decisions at this stage

## 2. Write One Test
- Write a single, fully automated test with setup, invocation, and assertions
- Consider working backwards from the assertions
- Focus on interface decisions, not implementation details
- Don't write tests without assertions just for code coverage
- Don't convert all test list items into concrete tests at once
- Pick the next test carefully - the order affects both experience and results

## 3. Make it Pass
- Change the system so the test passes for real
- Don't delete assertions to fake a passing test
- Don't copy computed values into expected values (defeats double-checking)
- Don't mix refactoring with making the test pass
- If you discover a new test case, add it to the Test List
- If a test invalidates previous work, consider starting over with a different test order

## 4. Optionally Refactor
- Now you can make implementation design decisions
- Don't refactor further than necessary for this session
- Don't abstract too soon - duplication is a hint, not a command
- Focus on making the code clean and maintainable

## 5. Repeat Until Test List is Empty
- Return to step 2 and pick the next test
- Continue until all test cases are covered
- Keep testing until your fear for the code's behavior has been "transmuted into boredom"

## Common Mistakes to Avoid
- Writing all tests before any code
- Writing tests without assertions
- Copying actual values into expected values
- Mixing refactoring with making tests pass
- Abstracting too early
- Refactoring beyond what's necessary